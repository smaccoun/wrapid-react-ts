'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.prototypes = exports.default = undefined;
var _isPlainObject2 = require('lodash/isPlainObject');
var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);
var _has2 = require('lodash/has');
var _has3 = _interopRequireDefault(_has2);
var _split2 = require('lodash/split');
var _split3 = _interopRequireDefault(_split2);
var _isString2 = require('lodash/isString');
var _isString3 = _interopRequireDefault(_isString2);
var _merge3 = require('lodash/merge');
var _merge4 = _interopRequireDefault(_merge3);
var _isFunction2 = require('lodash/isFunction');
var _isFunction3 = _interopRequireDefault(_isFunction2);
var _map2 = require('lodash/map');
var _map3 = _interopRequireDefault(_map2);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
} } return function (Constructor, protoProps, staticProps) { if (protoProps)
    defineProperties(Constructor.prototype, protoProps); if (staticProps)
    defineProperties(Constructor, staticProps); return Constructor; }; }();
var _desc, _value, _class, _descriptor, _descriptor2, _desc2, _value2, _obj;
var _mobx = require('mobx');
var _Base2 = require('./Base');
var _Base3 = _interopRequireDefault(_Base2);
var _Validator = require('./Validator');
var _Validator2 = _interopRequireDefault(_Validator);
var _Events = require('./Events');
var _Events2 = _interopRequireDefault(_Events);
var _State = require('./State');
var _State2 = _interopRequireDefault(_State);
var _Field = require('./Field');
var _Field2 = _interopRequireDefault(_Field);
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
}
else {
    obj[key] = value;
} return obj; }
function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor)
        return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _possibleConstructorReturn(self, call) { if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;
    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }
    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);
    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }
    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }
    return desc;
}
function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}
var Form = (_class = function (_Base) {
    _inherits(Form, _Base);
    function Form() {
        var setup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref$options = _ref.options, options = _ref$options === undefined ? {} : _ref$options, _ref$plugins = _ref.plugins, plugins = _ref$plugins === undefined ? {} : _ref$plugins, _ref$bindings = _ref.bindings, bindings = _ref$bindings === undefined ? {} : _ref$bindings;
        _classCallCheck(this, Form);
        var _this = _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this));
        _initDefineProp(_this, '$validating', _descriptor, _this);
        _initDefineProp(_this, 'fields', _descriptor2, _this);
        _this.onSubmit = function (e) {
            var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            e.preventDefault();
            _this.submit(o);
        };
        var initial = { setup: setup, options: options, plugins: plugins, bindings: bindings };
        (0, _map3.default)(initial, function (val, key) {
            return (0, _isFunction3.default)(_this[key]) && (0, _merge4.default)(initial, _defineProperty({}, key, _this[key].apply(_this, [_this])));
        });
        _this.name = initial.name || null;
        _this.state = new _State2.default({
            form: _this,
            initial: initial.setup,
            options: initial.options,
            bindings: initial.bindings
        });
        _this.validator = new _Validator2.default({
            options: _this.state.options,
            plugins: initial.plugins,
            schema: initial.setup.schema
        });
        _this.initFields(initial.setup);
        _this.validateOnInit();
        if ((0, _isFunction3.default)(_this.onInit)) {
            _this.onInit.apply(_this, [_this]);
        }
        return _this;
    }
    _createClass(Form, [{
            key: 'validating',
            get: function get() {
                return this.$validating;
            }
        }, {
            key: 'error',
            get: function get() {
                return this.validator.genericErrorMessage;
            }
        }, {
            key: 'hasError',
            get: function get() {
                return (0, _isString3.default)(this.validator.genericErrorMessage) || this.check('hasError', true);
            }
        }, {
            key: 'isValid',
            get: function get() {
                return !(0, _isString3.default)(this.validator.genericErrorMessage) && this.check('isValid', true);
            }
        }, {
            key: 'isDirty',
            get: function get() {
                return this.check('isDirty', true);
            }
        }, {
            key: 'isPristine',
            get: function get() {
                return this.check('isPristine', true);
            }
        }, {
            key: 'isDefault',
            get: function get() {
                return this.check('isDefault', true);
            }
        }, {
            key: 'isEmpty',
            get: function get() {
                return this.check('isEmpty', true);
            }
        }, {
            key: 'focus',
            get: function get() {
                return this.check('focus', true);
            }
        }, {
            key: 'touched',
            get: function get() {
                return this.check('touched', true);
            }
        }, {
            key: 'changed',
            get: function get() {
                return this.check('changed', true);
            }
        }, {
            key: 'disabled',
            get: function get() {
                return this.check('disabled', true);
            }
        }]);
    return Form;
}(_Base3.default), (_descriptor = _applyDecoratedDescriptor(_class.prototype, '$validating', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return false;
    }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'fields', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return _mobx.observable.map ? _mobx.observable.map({}) : (0, _mobx.asMap)({});
    }
}), _applyDecoratedDescriptor(_class.prototype, 'validating', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'validating'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'error', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'error'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'hasError', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'hasError'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isValid', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isValid'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isDirty', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isDirty'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isPristine', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isPristine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isDefault', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isDefault'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isEmpty', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isEmpty'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'focus', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'focus'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'touched', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'touched'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'changed', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'changed'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'disabled', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'disabled'), _class.prototype)), _class);
exports.default = Form;
var prototypes = exports.prototypes = (_obj = {
    makeField: function makeField(data) {
        return new _Field2.default(data);
    },
    on: function on(event, callback) {
        var _this2 = this;
        (0, _mobx.observe)(_Events2.default.getRunning(), function (_ref2) {
            var name = _ref2.name, oldValue = _ref2.oldValue, object = _ref2.object;
            if (!event.includes('@'))
                return;
            var $event = (0, _split3.default)(event, '@');
            var $path = _Events2.default.path(name);
            if ($event[0] === name && $event[1] === $path && oldValue && !object[name]) {
                callback({ form: _this2, path: $path });
            }
        });
    },
    validateOnInit: function validateOnInit() {
        if (this.state.options.get('validateOnInit') === false)
            return;
        this.validate({ showErrors: this.state.options.get('showErrorsOnInit') });
    },
    validate: function validate() {
        var _this3 = this;
        var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _mobx.action)(function () {
            return _this3.$validating = true;
        })();
        this.validator.resetGenericError();
        var $path = (0, _has3.default)(opt, 'path') ? opt.path : opt;
        var $field = null;
        if ((0, _has3.default)(opt, 'field'))
            $field = opt.field;
        else if ((0, _isString3.default)($path))
            $field = this.select($path);
        var showErrors = true;
        if ((0, _has3.default)(opt, 'showErrors'))
            showErrors = opt.showErrors;
        else if ((0, _has3.default)(obj, 'showErrors'))
            showErrors = obj.showErrors;
        var related = false;
        if ((0, _has3.default)(opt, 'related'))
            related = opt.related;
        else if ((0, _has3.default)(obj, 'related'))
            related = obj.related;
        _Events2.default.setRunning('validate', true, $field ? $field.path : $path);
        var notShowErrorsEvents = ['clear', 'reset'];
        if (this.state.options.get('showErrorsOnUpdate') === false)
            notShowErrorsEvents.push('update');
        var $showErrors = showErrors && !_Events2.default.running(notShowErrorsEvents);
        if ((0, _isPlainObject3.default)(opt) && !(0, _isString3.default)($path)) {
            return new Promise(function (resolve) {
                _this3.validator.validateAll({
                    related: related,
                    form: _this3,
                    showErrors: $showErrors
                });
                return Promise.all(_this3.validator.promises).then((0, _mobx.action)(function () {
                    return _this3.$validating = false;
                })).then(function () {
                    return _Events2.default.setRunning('validate', false);
                }).then(function () {
                    return resolve(_this3.isValid);
                });
            });
        }
        return new Promise(function (resolve) {
            _this3.validator.validateField({
                related: related,
                form: _this3,
                path: $path,
                field: $field,
                showErrors: $showErrors
            });
            return Promise.all(_this3.validator.promises).then((0, _mobx.action)(function () {
                return _this3.$validating = false;
            })).then(function () {
                return _Events2.default.setRunning('validate', false);
            }).then(function () {
                return resolve($field.isValid);
            });
        });
    },
    invalidate: function invalidate(message) {
        this.validator.invalidate(message);
    },
    clear: function clear() {
        this.deepAction('clear', this.fields);
    },
    reset: function reset() {
        this.deepAction('reset', this.fields);
    },
    submit: function submit() {
        var _this4 = this;
        var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var execOnSuccess = (0, _has3.default)(o, 'onSuccess') ? o.onSuccess : this.onSuccess;
        var execOnError = (0, _has3.default)(o, 'onError') ? o.onError : this.onError;
        this.validate().then(function (isValid) {
            return isValid ? execOnSuccess.apply(_this4, [_this4]) : execOnError.apply(_this4, [_this4]);
        });
    }
}, (_applyDecoratedDescriptor(_obj, 'clear', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'clear'), _obj), _applyDecoratedDescriptor(_obj, 'reset', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'reset'), _obj), _applyDecoratedDescriptor(_obj, 'submit', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'submit'), _obj)), _obj);
//# sourceMappingURL=Form.js.map