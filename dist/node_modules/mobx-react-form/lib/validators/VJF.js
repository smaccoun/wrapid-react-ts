'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;
var _isString2 = require('lodash/isString');
var _isString3 = _interopRequireDefault(_isString2);
var _isBoolean2 = require('lodash/isBoolean');
var _isBoolean3 = _interopRequireDefault(_isBoolean2);
var _isFunction2 = require('lodash/isFunction');
var _isFunction3 = _interopRequireDefault(_isFunction2);
var _isArray2 = require('lodash/isArray');
var _isArray3 = _interopRequireDefault(_isArray2);
var _isPlainObject2 = require('lodash/isPlainObject');
var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
} } return function (Constructor, protoProps, staticProps) { if (protoProps)
    defineProperties(Constructor.prototype, protoProps); if (staticProps)
    defineProperties(Constructor, staticProps); return Constructor; }; }();
var _mobx = require('mobx');
var _utils = require('../utils');
var _utils2 = _interopRequireDefault(_utils);
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
var VJF = function () {
    function VJF(plugin, _ref) {
        var _ref$promises = _ref.promises, promises = _ref$promises === undefined ? [] : _ref$promises, _ref$options = _ref.options, options = _ref$options === undefined ? {} : _ref$options;
        _classCallCheck(this, VJF);
        this.validator = null;
        if ((0, _isPlainObject3.default)(plugin)) {
            this.validator = plugin;
        }
        this.promises = promises;
        this.options = options;
    }
    _createClass(VJF, [{
            key: 'validateField',
            value: function validateField(field, form) {
                var _this = this;
                if (!field.validators)
                    return;
                var $fn = (0, _mobx.toJS)(field.validators);
                if ((0, _isArray3.default)($fn)) {
                    $fn.map(function (fn) {
                        return _this.collectData(fn, field, form);
                    });
                }
                if ((0, _isFunction3.default)($fn)) {
                    this.collectData($fn, field, form);
                }
                this.executeValidation(field);
            }
        }, {
            key: 'collectData',
            value: function collectData($fn, field, form) {
                var _this2 = this;
                var res = this.handleFunctionResult($fn, field, form);
                if (_utils2.default.isPromise(res)) {
                    if (!field.hasError)
                        field.invalidate(this.loadingMessage(), true);
                    var $p = res.then(function ($res) {
                        return field.setValidationAsyncData({
                            valid: $res[0],
                            message: $res[1]
                        });
                    }).then(function () {
                        return _this2.executeAsyncValidation(field);
                    }).then(function () {
                        return field.showAsyncErrors();
                    });
                    this.promises.push($p);
                    return;
                }
                field.validationFunctionsData.unshift({
                    valid: res[0],
                    message: res[1]
                });
            }
        }, {
            key: 'executeValidation',
            value: function executeValidation(field) {
                field.validationFunctionsData.map(function (rule) {
                    return rule.valid === false && field.invalidate(rule.message);
                });
            }
        }, {
            key: 'executeAsyncValidation',
            value: function executeAsyncValidation(field) {
                if (field.validationAsyncData.valid === false) {
                    field.invalidate(field.validationAsyncData.message, true);
                }
            }
        }, {
            key: 'handleFunctionResult',
            value: function handleFunctionResult($fn, field, form) {
                var res = $fn({ field: field, form: form, validator: this.validator });
                if ((0, _isArray3.default)(res)) {
                    var isValid = res[0] || false;
                    var message = res[1] || 'Error';
                    return [isValid, message];
                }
                if ((0, _isBoolean3.default)(res)) {
                    return [res, 'Error'];
                }
                if ((0, _isString3.default)(res)) {
                    return [false, res];
                }
                if (_utils2.default.isPromise(res)) {
                    return res;
                }
                return [false, 'Error'];
            }
        }, {
            key: 'loadingMessage',
            value: function loadingMessage() {
                return this.options.loadingMessage || 'validating...';
            }
        }]);
    return VJF;
}();
exports.default = VJF;
module.exports = exports['default'];
//# sourceMappingURL=VJF.js.map