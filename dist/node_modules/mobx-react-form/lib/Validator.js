'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;
var _isString2 = require('lodash/isString');
var _isString3 = _interopRequireDefault(_isString2);
var _each2 = require('lodash/each');
var _each3 = _interopRequireDefault(_each2);
var _isEmpty2 = require('lodash/isEmpty');
var _isEmpty3 = _interopRequireDefault(_isEmpty2);
var _merge2 = require('lodash/merge');
var _merge3 = _interopRequireDefault(_merge2);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
} } return function (Constructor, protoProps, staticProps) { if (protoProps)
    defineProperties(Constructor.prototype, protoProps); if (staticProps)
    defineProperties(Constructor, staticProps); return Constructor; }; }();
var _desc, _value, _class, _descriptor;
var _mobx = require('mobx');
var _VJF = require('./validators/VJF');
var _VJF2 = _interopRequireDefault(_VJF);
var _SVK = require('./validators/SVK');
var _SVK2 = _interopRequireDefault(_SVK);
var _DVR = require('./validators/DVR');
var _DVR2 = _interopRequireDefault(_DVR);
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor)
        return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;
    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }
    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);
    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }
    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }
    return desc;
}
function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}
var Validator = (_class = function () {
    function Validator() {
        var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        _classCallCheck(this, Validator);
        this.promises = [];
        this.options = {};
        this.schema = {};
        this.plugins = {
            vjf: true,
            svk: false,
            dvr: false
        };
        this.validators = {
            vjf: null,
            svk: null,
            dvr: null
        };
        _initDefineProp(this, '$genericErrorMessage', _descriptor, this);
        this.assignInitData(obj);
        this.initializePlugins();
    }
    _createClass(Validator, [{
            key: 'assignInitData',
            value: function assignInitData(_ref) {
                var _ref$options = _ref.options, options = _ref$options === undefined ? {} : _ref$options, _ref$plugins = _ref.plugins, plugins = _ref$plugins === undefined ? {} : _ref$plugins, _ref$schema = _ref.schema, schema = _ref$schema === undefined ? {} : _ref$schema;
                (0, _merge3.default)(this.plugins, plugins);
                this.options = options;
                this.schema = schema;
            }
        }, {
            key: 'initializePlugins',
            value: function initializePlugins() {
                if (this.plugins.dvr) {
                    this.validators.dvr = new _DVR2.default(this.plugins.dvr, {
                        promises: this.promises,
                        options: this.options
                    });
                }
                if (this.plugins.vjf) {
                    this.validators.vjf = new _VJF2.default(this.plugins.vjf, {
                        promises: this.promises,
                        options: this.options
                    });
                }
                if (this.plugins.svk) {
                    this.validators.svk = new _SVK2.default(this.plugins.svk, {
                        promises: this.promises,
                        options: this.options,
                        schema: this.schema
                    });
                }
            }
        }, {
            key: 'validateAll',
            value: function validateAll(_ref2) {
                var form = _ref2.form, _ref2$showErrors = _ref2.showErrors, showErrors = _ref2$showErrors === undefined ? true : _ref2$showErrors, _ref2$related = _ref2.related, related = _ref2$related === undefined ? false : _ref2$related;
                this.resetGenericError();
                this.validateAllDeep(form, form.fields, showErrors, related);
            }
        }, {
            key: 'validateAllDeep',
            value: function validateAllDeep(form, fields, showErrors, related) {
                var _this = this;
                if (!fields.size)
                    return;
                fields.forEach(function (field) {
                    _this.validateField({ form: form, field: field, path: field.path, showErrors: showErrors, related: related });
                    if (field.fields.size) {
                        _this.validateAllDeep(form, field.fields, showErrors, related);
                    }
                });
            }
        }, {
            key: 'validateField',
            value: function validateField(_ref3) {
                var _ref3$form = _ref3.form, form = _ref3$form === undefined ? null : _ref3$form, _ref3$field = _ref3.field, field = _ref3$field === undefined ? null : _ref3$field, path = _ref3.path, _ref3$showErrors = _ref3.showErrors, showErrors = _ref3$showErrors === undefined ? true : _ref3$showErrors, _ref3$related = _ref3.related, related = _ref3$related === undefined ? false : _ref3$related;
                var $field = field || form.select(path);
                $field.resetValidation();
                var _validators = this.validators, svk = _validators.svk, dvr = _validators.dvr, vjf = _validators.vjf;
                if (vjf)
                    vjf.validateField($field, form);
                if (dvr)
                    dvr.validateField($field, form);
                if (svk)
                    svk.validateField($field);
                $field.showErrors(showErrors);
                if (related)
                    this.relatedFieldValidation(form, $field, showErrors);
            }
        }, {
            key: 'relatedFieldValidation',
            value: function relatedFieldValidation(form, field, showErrors) {
                var _this2 = this;
                if (!(0, _isEmpty3.default)(field.related)) {
                    (0, _each3.default)(field.related, function (path) {
                        return _this2.validateField({ form: form, path: path, showErrors: showErrors, related: false });
                    });
                }
            }
        }, {
            key: 'getDefaultErrorMessage',
            value: function getDefaultErrorMessage() {
                var $default = this.options.get('defaultGenericError');
                if ((0, _isString3.default)($default))
                    return $default;
                return 'The form is invalid';
            }
        }, {
            key: 'resetGenericError',
            value: function resetGenericError() {
                this.$genericErrorMessage = null;
            }
        }, {
            key: 'invalidate',
            value: function invalidate() {
                var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                if ((0, _isString3.default)(message)) {
                    this.$genericErrorMessage = message;
                    return;
                }
                this.$genericErrorMessage = this.getDefaultErrorMessage();
            }
        }, {
            key: 'genericErrorMessage',
            get: function get() {
                return this.options.get('alwaysShowDefaultError') ? this.$genericErrorMessage || this.options.get('defaultGenericError') : this.$genericErrorMessage;
            }
        }]);
    return Validator;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, '$genericErrorMessage', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return null;
    }
}), _applyDecoratedDescriptor(_class.prototype, 'validateAll', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'validateAll'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'validateField', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'validateField'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'genericErrorMessage', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'genericErrorMessage'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'resetGenericError', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'resetGenericError'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'invalidate', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'invalidate'), _class.prototype)), _class);
exports.default = Validator;
module.exports = exports['default'];
//# sourceMappingURL=Validator.js.map