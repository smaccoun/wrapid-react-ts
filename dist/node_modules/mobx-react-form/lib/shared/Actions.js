'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _trimEnd2 = require('lodash/trimEnd');
var _trimEnd3 = _interopRequireDefault(_trimEnd2);
var _last2 = require('lodash/last');
var _last3 = _interopRequireDefault(_last2);
var _split2 = require('lodash/split');
var _split3 = _interopRequireDefault(_split2);
var _isPlainObject2 = require('lodash/isPlainObject');
var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);
var _isObject2 = require('lodash/isObject');
var _isObject3 = _interopRequireDefault(_isObject2);
var _isString2 = require('lodash/isString');
var _isString3 = _interopRequireDefault(_isString2);
var _union2 = require('lodash/union');
var _union3 = _interopRequireDefault(_union2);
var _isFunction2 = require('lodash/isFunction');
var _isFunction3 = _interopRequireDefault(_isFunction2);
var _isArray2 = require('lodash/isArray');
var _isArray3 = _interopRequireDefault(_isArray2);
var _isNil2 = require('lodash/isNil');
var _isNil3 = _interopRequireDefault(_isNil2);
var _trimStart2 = require('lodash/trimStart');
var _trimStart3 = _interopRequireDefault(_trimStart2);
var _each2 = require('lodash/each');
var _each3 = _interopRequireDefault(_each2);
var _reduce2 = require('lodash/reduce');
var _reduce3 = _interopRequireDefault(_reduce2);
var _has2 = require('lodash/has');
var _has3 = _interopRequireDefault(_has2);
var _set2 = require('lodash/set');
var _set3 = _interopRequireDefault(_set2);
var _desc, _value, _obj;
var _mobx = require('mobx');
var _utils = require('../utils');
var _utils2 = _interopRequireDefault(_utils);
var _parser = require('../parser');
var _parser2 = _interopRequireDefault(_parser);
var _Events = require('../Events');
var _Events2 = _interopRequireDefault(_Events);
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
}
else {
    obj[key] = value;
} return obj; }
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;
    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }
    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);
    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }
    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }
    return desc;
}
exports.default = (_obj = {
    init: function init() {
        var $fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        (0, _set3.default)(this, 'fields', _mobx.observable.map ? _mobx.observable.map({}) : (0, _mobx.asMap)({}));
        if (!(0, _has3.default)(this, 'isField')) {
            this.state.initial.props.values = $fields;
            this.state.current.props.values = $fields;
        }
        this.initFields({
            fields: $fields || this.state.struct()
        });
    },
    check: function check(computed) {
        var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        _utils2.default.allowed('computed', [computed]);
        var $ = {
            hasError: 'some',
            isValid: 'every',
            isDirty: 'some',
            isPristine: 'every',
            isDefault: 'every',
            isEmpty: 'every',
            focus: 'some',
            touched: 'some',
            changed: 'some',
            disabled: 'every'
        };
        return deep ? _utils2.default.check({
            type: $[computed],
            data: this.deepCheck($[computed], computed, this.fields)
        }) : this[computed];
    },
    deepCheck: function deepCheck($, prop, fields) {
        var _this = this;
        return (0, _reduce3.default)(fields.values(), function (check, field) {
            if (field.fields.size === 0) {
                check.push(field[prop]);
                return check;
            }
            var $deep = _this.deepCheck($, prop, field.fields);
            check.push(_utils2.default.check({ type: $, data: $deep }));
            return check;
        }, []);
    },
    update: function update(fields) {
        var strictProps = this.state.type === 'unified';
        var $fields = _parser2.default.prepareFieldsData({ fields: fields }, strictProps);
        this.deepUpdate($fields);
    },
    deepUpdate: function deepUpdate(fields) {
        var _this2 = this;
        var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var recursion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        (0, _each3.default)(fields, function (field, key) {
            var $path = (0, _trimStart3.default)(path + '.' + key, '.');
            var $field = _this2.select($path, null, false);
            var $container = _this2.container(path);
            if (!(0, _isNil3.default)($field) && !(0, _isNil3.default)(field)) {
                if ((0, _isArray3.default)($field.values())) {
                    (0, _each3.default)($field.fields.values(), function ($f) {
                        return $field.fields.delete($f.name);
                    });
                }
                if ((0, _isNil3.default)(field.fields)) {
                    $field.value = field;
                    return;
                }
            }
            if (!(0, _isNil3.default)($container)) {
                var $fullPath = (0, _trimStart3.default)([_this2.path, $path].join('.'), '.');
                $container.initField(key, $fullPath, field, null, true);
            }
            if (recursion) {
                var $fields = _parser2.default.pathToFieldsTree(_this2.state.struct(), $path);
                _this2.deepUpdate($fields, $path, false);
            }
            if (recursion && (0, _has3.default)(field, 'fields') && !(0, _isNil3.default)(field.fields)) {
                _this2.deepUpdate(field.fields, $path);
            }
        });
    },
    map: function map(path) {
        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        if ((0, _isFunction3.default)(path) && !callback) {
            return this.fields.values().map(path);
        }
        var field = this.select(path);
        return field.fields.values().map(callback);
    },
    deepMap: function deepMap(prop, fields) {
        var _this3 = this;
        return (0, _reduce3.default)(fields.values(), function (obj, field) {
            if (field.fields.size === 0) {
                return Object.assign(obj, _defineProperty({}, field.key, field[prop]));
            }
            var data = _this3.deepMap(prop, field.fields);
            var value = field.hasIncrementalNestedFields ? _parser2.default.parseArrayProp(data, prop) : data;
            return Object.assign(obj, _defineProperty({}, field.key, value));
        }, {});
    },
    get: function get() {
        var prop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        if ((0, _isNil3.default)(prop)) {
            var all = (0, _union3.default)(_utils2.default.computed, _utils2.default.props, _utils2.default.vprops);
            return this.deepGet(all, this.fields);
        }
        _utils2.default.allowed('all', (0, _isArray3.default)(prop) ? prop : [prop]);
        if (!(0, _isArray3.default)(prop)) {
            var data = this.deepMap(prop, this.fields);
            return this.hasIncrementalNestedFields ? _parser2.default.parseArrayProp(data, prop) : data;
        }
        return this.deepGet(prop, this.fields);
    },
    deepGet: function deepGet(prop, fields) {
        var _this4 = this;
        return (0, _reduce3.default)(fields.values(), function (obj, field) {
            var $nested = function $nested($fields) {
                return $fields.size !== 0 ? _this4.deepGet(prop, $fields) : undefined;
            };
            Object.assign(obj, _defineProperty({}, field.key, { fields: $nested(field.fields) }));
            if ((0, _isArray3.default)(prop)) {
                (0, _each3.default)(prop, function ($prop) {
                    return Object.assign(obj[field.key], _defineProperty({}, $prop, field[$prop]));
                });
            }
            return obj;
        }, {});
    },
    set: function set($) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var recursion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var $e = 'update';
        if (!recursion) {
            _Events2.default.setRunning($e, true, this.path);
        }
        if ((0, _has3.default)(this, 'isField')) {
            if ((0, _isString3.default)($) && !(0, _isNil3.default)(data)) {
                _utils2.default.allowed('props', [$]);
                (0, _set3.default)(this, '$' + $, data);
                if (!recursion)
                    _Events2.default.setRunning($e, false);
                return;
            }
            if ((0, _isString3.default)($) && (0, _isNil3.default)(data)) {
                this.set('value', $);
                if (!recursion)
                    _Events2.default.setRunning($e, false);
                return;
            }
        }
        if ((0, _isObject3.default)($) && !data) {
            this.deepSet('value', $, '', true);
            if (!recursion)
                _Events2.default.setRunning($e, false);
            return;
        }
        if ((0, _isString3.default)($) && (0, _isObject3.default)(data)) {
            _utils2.default.allowed('props', [$]);
            this.deepSet($, data, '', true);
            if (!recursion)
                _Events2.default.setRunning($e, false);
        }
    },
    deepSet: function deepSet($, data) {
        var _this5 = this;
        var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        var recursion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var err = 'You are updating a not existent field:';
        var isStrict = this.state.options.get('strictUpdate');
        (0, _each3.default)(data, function ($val, $key) {
            var $path = (0, _trimStart3.default)(path + '.' + $key, '.');
            var field = _this5.select($path, null, isStrict);
            if (isStrict)
                _utils2.default.throwError($path, field, err);
            if (!(0, _isNil3.default)(field)) {
                field.set($, $val, recursion);
                if (field.fields.size && (0, _isObject3.default)($val)) {
                    _this5.deepSet($, $val, $path, recursion);
                }
            }
        });
    },
    deepAction: function deepAction($action, fields) {
        var _this6 = this;
        var recursion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        if (!recursion) {
            _Events2.default.setRunning($action, true, this.path);
        }
        if (fields.size !== 0) {
            fields.forEach(function (field) {
                field[$action]();
                _this6.deepAction($action, field.fields, true);
            });
        }
        if (!recursion) {
            _Events2.default.setRunning($action, false);
        }
    },
    add: function add() {
        var _this7 = this;
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var $key = void 0;
        if ((0, _has3.default)(opt, 'key'))
            $key = opt.key;
        else
            $key = _utils2.default.maxKey(this.fields) + 1;
        var tree = _parser2.default.pathToFieldsTree(this.state.struct(), this.path);
        var $path = function $path(key) {
            return (0, _trimStart3.default)([_this7.path, key].join('.'), '.');
        };
        (0, _each3.default)(tree, function (field) {
            return _this7.initField($key, $path($key), field);
        });
        if (!(0, _isNil3.default)(value)) {
            var field = this.select($key);
            if ((0, _isPlainObject3.default)(value)) {
                field.update(value);
            }
            field.initial = value;
            field.default = value;
            field.value = value;
        }
        return $key;
    },
    del: function del() {
        var partialPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var path = _parser2.default.parsePath(partialPath);
        var keys = (0, _split3.default)(path, '.');
        var last = (0, _last3.default)(keys);
        var cpath = (0, _trimEnd3.default)(path, '.' + last);
        var isStrict = this.state.options.get('strictDelete');
        var container = this.select(cpath, null, false) || this.state.form.select(cpath, null, false) || this.state.form.select(this.path, null, true);
        if (isStrict && !container.fields.has(last)) {
            var msg = 'Key "' + last + '" not found when trying to delete field';
            var $path = (0, _trimStart3.default)([this.path, path].join('.'), '.');
            _utils2.default.throwError($path, null, msg);
        }
        container.fields.delete(last);
    }
}, (_applyDecoratedDescriptor(_obj, 'init', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'init'), _obj), _applyDecoratedDescriptor(_obj, 'deepUpdate', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'deepUpdate'), _obj), _applyDecoratedDescriptor(_obj, 'set', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'set'), _obj), _applyDecoratedDescriptor(_obj, 'add', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'add'), _obj), _applyDecoratedDescriptor(_obj, 'del', [_mobx.action], Object.getOwnPropertyDescriptor(_obj, 'del'), _obj)), _obj);
module.exports = exports['default'];
//# sourceMappingURL=Actions.js.map