'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _bowser = require('bowser');
var _bowser2 = _interopRequireDefault(_bowser);
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var vendorPrefixes = {
    Webkit: ['chrome', 'safari', 'ios', 'android', 'phantom', 'opera', 'webos', 'blackberry', 'bada', 'tizen', 'chromium', 'vivaldi'],
    Moz: ['firefox', 'seamonkey', 'sailfish'],
    ms: ['msie', 'msedge']
};
var browsers = {
    chrome: [['chrome'], ['chromium']],
    safari: [['safari']],
    firefox: [['firefox']],
    edge: [['msedge']],
    opera: [['opera'], ['vivaldi']],
    ios_saf: [['ios', 'mobile'], ['ios', 'tablet']],
    ie: [['msie']],
    op_mini: [['opera', 'mobile'], ['opera', 'tablet']],
    and_uc: [['android', 'mobile'], ['android', 'tablet']],
    android: [['android', 'mobile'], ['android', 'tablet']]
};
var browserByInfo = function browserByInfo(info) {
    if (info.firefox) {
        return 'firefox';
    }
    var name = '';
    Object.keys(browsers).forEach(function (browser) {
        browsers[browser].forEach(function (condition) {
            var match = 0;
            condition.forEach(function (single) {
                if (info[single]) {
                    match += 1;
                }
            });
            if (condition.length === match) {
                name = browser;
            }
        });
    });
    return name;
};
exports.default = function (userAgent) {
    if (!userAgent) {
        return false;
    }
    var info = _bowser2.default._detect(userAgent);
    Object.keys(vendorPrefixes).forEach(function (prefix) {
        vendorPrefixes[prefix].forEach(function (browser) {
            if (info[browser]) {
                info.prefix = {
                    inline: prefix,
                    css: '-' + prefix.toLowerCase() + '-'
                };
            }
        });
    });
    info.browser = browserByInfo(info);
    info.version = info.version ? parseFloat(info.version) : parseInt(parseFloat(info.osversion), 10);
    info.osversion = parseFloat(info.osversion);
    if (info.browser === 'ios_saf' && info.version > info.osversion) {
        info.version = info.osversion;
        info.safari = true;
    }
    if (info.browser === 'android' && info.chrome && info.version > 37) {
        info.browser = 'and_chr';
    }
    if (info.browser === 'android' && info.osversion < 5) {
        info.version = info.osversion;
    }
    return info;
};
module.exports = exports['default'];
//# sourceMappingURL=getBrowserInformation.js.map