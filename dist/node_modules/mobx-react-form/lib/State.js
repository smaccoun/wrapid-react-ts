'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;
var _pick2 = require('lodash/pick');
var _pick3 = _interopRequireDefault(_pick2);
var _union2 = require('lodash/union');
var _union3 = _interopRequireDefault(_union2);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
} } return function (Constructor, protoProps, staticProps) { if (protoProps)
    defineProperties(Constructor.prototype, protoProps); if (staticProps)
    defineProperties(Constructor, staticProps); return Constructor; }; }();
var _Bindings = require('./Bindings');
var _Bindings2 = _interopRequireDefault(_Bindings);
var _Options = require('./Options');
var _Options2 = _interopRequireDefault(_Options);
var _utils = require('./utils');
var _utils2 = _interopRequireDefault(_utils);
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
var State = function () {
    function State(_ref) {
        var form = _ref.form, initial = _ref.initial, options = _ref.options, bindings = _ref.bindings;
        _classCallCheck(this, State);
        this.$struct = [];
        this.initial = {
            props: {},
            fields: {}
        };
        this.current = {
            props: {},
            fields: {}
        };
        this.set('form', form);
        this.initProps(initial);
        this.initOptions(options);
        this.initBindings(bindings);
    }
    _createClass(State, [{
            key: 'initOptions',
            value: function initOptions(options) {
                this.options = new _Options2.default();
                this.options.set(options);
            }
        }, {
            key: 'initProps',
            value: function initProps(initial) {
                var $props = (0, _union3.default)(_utils2.default.iprops, _utils2.default.vprops);
                var initialProps = (0, _pick3.default)(initial, $props);
                this.set('initial', 'props', initialProps);
                if (_utils2.default.isStruct(initial.fields) || _utils2.default.hasSeparatedProps(initial)) {
                    this.type = 'separated';
                    this.struct(initial.fields);
                    return;
                }
                if (!_utils2.default.hasUnifiedProps(initial.fields)) {
                    this.type = 'unified';
                }
            }
        }, {
            key: 'initBindings',
            value: function initBindings(bindings) {
                this.bindings = new _Bindings2.default();
                this.bindings.register(bindings);
            }
        }, {
            key: 'struct',
            value: function struct() {
                var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                if (data)
                    this.$struct = data;
                return this.$struct;
            }
        }, {
            key: 'get',
            value: function get(type, subtype) {
                return this[type][subtype];
            }
        }, {
            key: 'set',
            value: function set(type, subtype) {
                var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                if (type === 'form') {
                    this.form = subtype;
                }
                if (type === 'initial') {
                    Object.assign(this.initial[subtype], state);
                    Object.assign(this.current[subtype], state);
                }
                if (type === 'current') {
                    Object.assign(this.current[subtype], state);
                }
            }
        }]);
    return State;
}();
exports.default = State;
module.exports = exports['default'];
//# sourceMappingURL=State.js.map