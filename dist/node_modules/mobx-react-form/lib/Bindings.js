'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;
var _isNil2 = require('lodash/isNil');
var _isNil3 = _interopRequireDefault(_isNil2);
var _isPlainObject2 = require('lodash/isPlainObject');
var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);
var _isFunction2 = require('lodash/isFunction');
var _isFunction3 = _interopRequireDefault(_isFunction2);
var _merge5 = require('lodash/merge');
var _merge6 = _interopRequireDefault(_merge5);
var _each2 = require('lodash/each');
var _each3 = _interopRequireDefault(_each2);
var _has2 = require('lodash/has');
var _has3 = _interopRequireDefault(_has2);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
} } return function (Constructor, protoProps, staticProps) { if (protoProps)
    defineProperties(Constructor.prototype, protoProps); if (staticProps)
    defineProperties(Constructor, staticProps); return Constructor; }; }();
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
}
else {
    obj[key] = value;
} return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
var Bindings = function () {
    function Bindings() {
        _classCallCheck(this, Bindings);
        this.rewriters = {
            default: {
                id: 'id',
                name: 'name',
                type: 'type',
                value: 'value',
                label: 'label',
                placeholder: 'placeholder',
                disabled: 'disabled',
                onChange: 'onChange',
                onFocus: 'onFocus',
                onBlur: 'onBlur'
            }
        };
        this.templates = {
            default: function _default(_ref) {
                var _ref2;
                var field = _ref.field, props = _ref.props, keys = _ref.keys, $try = _ref.$try;
                return _ref2 = {}, _defineProperty(_ref2, keys.id, $try(props.id, field.id)), _defineProperty(_ref2, keys.name, $try(props.name, field.name)), _defineProperty(_ref2, keys.type, $try(props.type, field.type)), _defineProperty(_ref2, keys.value, $try(props.value, field.value)), _defineProperty(_ref2, keys.label, $try(props.label, field.label)), _defineProperty(_ref2, keys.placeholder, $try(props.placeholder, field.placeholder)), _defineProperty(_ref2, keys.disabled, $try(props.disabled, field.disabled)), _defineProperty(_ref2, keys.onChange, $try(props.onChange, field.onChange)), _defineProperty(_ref2, keys.onFocus, $try(props.onFocus, field.onFocus)), _defineProperty(_ref2, keys.onBlur, $try(props.onBlur, field.onBlur)), _ref2;
            }
        };
    }
    _createClass(Bindings, [{
            key: 'load',
            value: function load(field) {
                var _this = this;
                var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
                var props = arguments[2];
                if ((0, _has3.default)(this.rewriters, name)) {
                    var _ret = function () {
                        var $bindings = {};
                        (0, _each3.default)(_this.rewriters[name], function ($v, $k) {
                            return (0, _merge6.default)($bindings, _defineProperty({}, $v, _this.try(props[$k], field[$k])));
                        });
                        return {
                            v: $bindings
                        };
                    }();
                    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object")
                        return _ret.v;
                }
                return this.templates[name]({
                    keys: this.rewriters[name],
                    $try: this.try,
                    field: field,
                    props: props
                });
            }
        }, {
            key: 'register',
            value: function register(bindings) {
                var _this2 = this;
                (0, _each3.default)(bindings, function (val, key) {
                    if ((0, _isFunction3.default)(val))
                        (0, _merge6.default)(_this2.templates, _defineProperty({}, key, val));
                    if ((0, _isPlainObject3.default)(val))
                        (0, _merge6.default)(_this2.rewriters, _defineProperty({}, key, val));
                });
                return this;
            }
        }, {
            key: 'try',
            value: function _try() {
                var found = null;
                (0, _each3.default)(arguments, function (val, key) {
                    if (!found && !(0, _isNil3.default)(val))
                        found = val;
                });
                return found;
            }
        }]);
    return Bindings;
}();
exports.default = Bindings;
module.exports = exports['default'];
//# sourceMappingURL=Bindings.js.map